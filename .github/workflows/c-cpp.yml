name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install Conan
      - name: Setup Conan
        uses: conan-io/setup-conan@v1
        with:
          cache_packages: true

      - name: Install dependencies
        run: |
          conan install . --output-folder=build --build=missing


      # Upload build folder as artifact for downstream jobs
      - name: Upload build folder
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  build:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - uses: actions/checkout@v4

      # Download build folder from package job
      - name: Download build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      # Build project
      - name: Build project
        uses: threeal/cmake-action@v2.1.0
        with:
          source-dir: .
          build-dir: build
          cxx-compiler: clang++
          args: -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          build-args: -- -j

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Lint project
        uses: cpp-linter/cpp-linter-action@v2
        id: linter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          style: 'file'
          tidy-checks: ''
          database: 'build'
          thread-comments: ${{ github.event_name == 'pull_request' && 'update' }}
          format-review: true
          tidy-review: true

      - name: Fail fast if lint fails
        if: steps.linter.outputs.checks-failed > 0
        run: exit 1

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Run unit tests
        run: |
          cd build
          ctest --output-on-failure -j $(nproc)
